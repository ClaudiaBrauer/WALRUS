


1.09: 
==============================================

Problem 1: 
---------

If several runs of loop_long in parallel, then output_temp-file is overwritten.


Solution 1: 
-----------

Code in version 1.08 (loop_long-script):
	WALRUS_loop_long = function(pars, chunk_size=1e4, show_progress=FALSE)

  	write.table(o, "output/output_temp.dat", row.names=FALSE) 

      	write(t(as.matrix(mod[,1:10])), file="output/output_temp.dat", ncolumns=10, append=TRUE)

  	return(read.table("output/output_temp.dat", header=TRUE))

Code in version 1.09 (loop_long-script):
	WALRUS_loop_long = function(pars, chunk_size=1e4, show_progress=FALSE, name="")

	filename = paste0("output/output_temp_",name,".dat")

  	write.table(o, filename, row.names=FALSE) 

      	write(t(as.matrix(mod[,1:10])), file=filename, ncolumns=10, append=TRUE)

  	return(read.table(filename, header=TRUE))


Problem 2: 
---------

Error when plotting the output of a run of less than 5 days.


Solution 2: 
-----------

Code in version 1.08 (figures-script):
    plot(o$d, rollmean(o$ETpot, round(120/mean(dt)), fill=NA), col="grey", 
         type="l", ylim=range(0,rollmean(o$ETpot, round(120/mean(dt)))*1.05),  
         xlab="", ylab=substitute(paste("ET [mm d"^{-1}, "]")), xaxt="n")

Code in version 1.09 (figures-script):
    if(L* mean(dt) > 20*24){
      plot(o$d, rollmean(o$ETpot, round(120/mean(dt)), fill=NA), col="grey", 
           type="l", ylim=range(0,rollmean(o$ETpot, round(120/mean(dt)))*1.05),  
           xlab="", ylab=substitute(paste("ET [mm d"^{-1}, "]")), xaxt="n")
      lines(o$d, rollmean(o$ETact, round(120/mean(dt)), fill=NA), col="red")   
    }else{
      plot(o$d, o$ETpot, col="grey", 
           type="l", ylim=range(0,rollmean(o$ETpot, round(120/mean(dt)))*1.05),  
           xlab="", ylab=substitute(paste("ET [mm d"^{-1}, "]")), xaxt="n")
      lines(o$d, o$ETact, col="red")   
    }




Problem 3: 
---------

Plots of residuals are automatically generated, but often not necessary. 
Also, there should be an option not to make figures.

Solution 3: 
-----------

Code in version 1.08 (postprocessing-script):
	WALRUS_postprocessing = function(o, pars, n)
	WALRUS_residuals(o_new, p_new, n)
	WALRUS_figures(o_new, p_new, n)  

Code in version 1.09 (postprocessing-script):
	WALRUS_postprocessing = function(o, pars, n, figures=TRUE, residuals=FALSE)
	if(residuals==TRUE){WALRUS_residuals(o_new, p_new, n)}
	if(figures==TRUE){WALRUS_figures(o_new, p_new, n)}







1.08: 
==============================================

Problem 1: 
---------

Error in output processing after loop_long.


Solution 1: 
-----------

Code added in version 1.08 (loop_long-script):
	output_date <<- output_date_all




1.07: 
==============================================

Problem 1: 
---------

Memory overflow when running very long series.


Solution 1: 
-----------

Time series cut up in chunks


Code added in version 1.07 (defaults-script):
	max_nr_steps = 200000

New script with function added: WALRUS_loop_long




1.06: 
==============================================

Problem 1: 
-------

Printed error message when Q not provided. 


Solution 1: 
---------

No error message printed

Code in version 1.05 (in preprocessing-script):
  if(is.null(f$Q)==TRUE){print("Error: please supply Q in forcing data frame")}


Code in version 1.06 (in preprocessing-script):
	if(is.null(f$Q)==TRUE){f$Q=rep(0,nrow(f))}


Problem 2: 
-------

Snow melt simulated at t=1 when temperatture above zero


Solution 2: 
---------

Code added in version 1.06 (in snow-script):
	# first time step
  	if(f$T[1]>snowpar[5]){melt[1] = 0}



Problem 3: 
-------

No option for input data files provided with time stamps at the end of the measurement interval. 


Solution 3:
-------
Added an extra argument to the preprocessing-script, with default .


Code in version 1.05 (in preprocessing-script):
	WALRUS_preprocessing = function(f, dt, timestamp="start")


Code in version 1.06 (in preprocessing-script):
	WALRUS_preprocessing = function(f, dt, timestamp="start")

Code added in version 1.06 (in preprocessing-script):
	if(timestamp=="end")
	{
	  date[2:length(date)] = date[1:(length(date)-1)]
	  date[1]              = date[2] - (date[3] - date[2])
	  f$dG[2:nrow(f)]      = f$dG[1:(nrow(f)-1)]  
	  f$hSmin[2:nrow(f)]   = f$hSmin[1:(nrow(f)-1)]  
	}


1.05: 
==============================================

Problem 1: 
-------

No option to give starting values for hS, dV and hQ


Solution 1: 
---------

Code in version 1.04 (in loop-script):

	  # INITIAL CONDITIONS    
	  # Q[1] is necessary for stepsize-check (if dQ too large)
	  o$Q     [1]  = func_Qobs(output_date[2]) / (output_date[2]-output_date[1]) *3600 

	  # hS from first Q measurement and Qh-relation
	  o$hS    [1]  = uniroot(f=function(x){return(
        	         get("func_Q_hS", envir=.WALRUSenv)(x,pars,hSmin=func_hSmin(output_date[1]))-o$Q[1])},
                	 lower=0, upper=pars$cD)$root 
	  # dG and hQ    
	  if(is.null(pars$dG0)==FALSE)                           # if dG0 provided 
	  {
	    o$dG  [1]  = pars$dG0
	    if((pars$cD-o$dG[1])<o$hS[1])                        # if groundwater below surface water level
	    {
	      o$hQ [1] = o$Q[1]*pars$cQ                          # all Q from quickflow
	    }else{                                               # if groundwater above surface water level
	      o$hQ [1] = max(0,(o$Q[1]-(pars$cD-o$dG[1]-o$hS[1])*(pars$cD-o$dG[1])/pars$cG) *pars$cQ)
	    }

	  }else{                                                 # if dG0 not provided 
	    if(is.null(pars$Gfrac)==TRUE){pars$Gfrac=1}          # if Gfrac also not provided, make Gfrac 1
	    # if fGS not possible with current hS and cG, make Gfrac smaller
	    while(((pars$cD-o$hS[1])*pars$cD/pars$cG) < (pars$Gfrac*o$Q[1])) {pars$Gfrac = pars$Gfrac/2}
	    # compute dG leading to the right fGS
	    o$dG  [1]  = uniroot(f=function(x){return((pars$cD-x-o$hS[1])*(pars$cD-x)/pars$cG - o$Q[1]*pars$Gfrac)},
	                         lower=0, upper=(pars$cD-o$hS[1]))$root
	    o$hQ  [1]  = o$Q[1] *(1-pars$Gfrac) *pars$cQ    
	  }
	  # dependent variables
	  o$dVeq [1]  = get("func_dVeq_dG", envir=.WALRUSenv)(o$dG[1], pars) 
	  o$dV   [1]  = o$dVeq[1]
	  o$W     [1]  = get("func_W_dV", envir=.WALRUSenv)(o$dV[1], pars)

Code in version 1.05 (in loop-script):

	  # INITIAL CONDITIONS 
    
	  # Q[1] is necessary for stepsize-check (if dQ too large)
	  if(is.null(pars$Q0)==FALSE)
	    {
	      o$Q[1]  = pars$Q0
	    }else{
	      o$Q[1]  = func_Qobs(output_date[2]) / (output_date[2]-output_date[1]) *3600
	    }	

	  # hS from first Q measurement and Qh-relation
	  if(is.null(pars$hS0)==FALSE)
	  {
	    o$hS[1]  = pars$hS0
	  }else{
	    o$hS[1]  = uniroot(f=function(x){return(
	      get("func_Q_hS", envir=.WALRUSenv)(x,pars,hSmin=func_hSmin(output_date[1]))-o$Q[1])},
	      lower=0, upper=pars$cD)$root 
	  }
  
  
	# dG and hQ    
	  if(is.null(pars$dG0)==FALSE)                            # if dG0 provided 
	  {
	    o$dG[1] = pars$dG0
	    if(is.null(pars$hQ0)==FALSE)                          # if hQ0 also provided 
	    {
	      o$hQ[1] = pars$hQ0
	    }else{                                                # if hQ0 not provided 
	      if((pars$cD-o$dG[1])<o$hS[1])                       # if groundwater below surface water level
	      {
	        o$hQ [1] = o$Q[1]*pars$cQ                         # all Q from quickflow
	      }else{                                              # if groundwater above surface water level
	        o$hQ [1] = max(0,(o$Q[1]-(pars$cD-o$dG[1]-o$hS[1])*(pars$cD-o$dG[1])/pars$cG) *pars$cQ)
	      }   
	    }
    
	  }else if(is.null(pars$dG0)==TRUE & is.null(pars$hQ0)==FALSE) # if hQ0 provided but dG0 not
	  {
	    o$hQ[1] = pars$hQ0
	    o$dG[1] = max(0,uniroot(f=function(x){return((pars$cD-x-o$hS[1])*(pars$cD-x)/pars$cG - max((o$Q[1]-o$hQ[1]/pars$cQ),0))},
        	                 lower=0, upper=(pars$cD-o$hS[1]))$root)
	  }else{                                                 # if dG0 not provided 
	    if(is.null(pars$Gfrac)==TRUE){pars$Gfrac=1}          # if Gfrac also not provided, make Gfrac 1
	    # if fGS not possible with current hS and cG, make Gfrac smaller
	    while(((pars$cD-o$hS[1])*pars$cD/pars$cG) < (pars$Gfrac*o$Q[1])) {pars$Gfrac = pars$Gfrac/2}
	    # compute dG leading to the right fGS
	    o$dG  [1]  = uniroot(f=function(x){return((pars$cD-x-o$hS[1])*(pars$cD-x)/pars$cG - o$Q[1]*pars$Gfrac)},
	                         lower=0, upper=(pars$cD-o$hS[1]))$root
	    o$hQ  [1]  = o$Q[1] *(1-pars$Gfrac) *pars$cQ    
	  }

	  # dVeq
	  o$dVeq [1]  = get("func_dVeq_dG", envir=.WALRUSenv)(o$dG[1], pars)   
  
	  # dV
	  if(is.null(pars$dV0)==FALSE)
	  {
	    o$dV[1]  = pars$dV0
	  }else{
	    o$dV[1]  = o$dVeq[1]
	  }

	  # W
	  o$W    [1]  = get("func_W_dV", envir=.WALRUSenv)(o$dV[1], pars)


1.04: 
==============================================

Problem 1: 
-------

Error in snow module.


Solution 1: 
---------

Code in version 1.03 (in snow-script):
  	frac[f$T < snowpar[7] & f$T >= snowpar[6]] = (f$T - snowpar[6]) / (snowpar[7] - snowpar[6])

Code in version 1.04 (in snow-script):
  	idx = which(f$T < snowpar[7] & f$T >= snowpar[6])
  	frac[idx] = (f$T[idx] - snowpar[6]) / (snowpar[7] - snowpar[6])



1.03: 
==============================================

Problem 1: 
-------

Running set_func_Q_hS() did not result in the default Q-hS relation (same holds for set_func_W_dV, set_func_dVeq_dG and set_func_beta_dV


Solution 1: 
---------

The argument newfunc has to be set to NULL in all four functions (one shown here as example). The code didn't change, but the text in the help for these functions did.



Problem 2: 
-------

WALRUS_GoF produces warning when observed or modeled discharge is zero. 


Solution 2: 
---------

WALRUS_GoF only computes Nash-Sutcliffe of log(Q) when discharge is always above zero. 

Code in version 1.02 (in GoF-script):
	pars$NSlog  = round(1- sum((log(o$Qobs) - log(o$Q))^2, na.rm=TRUE) / sum((log(o$Qobs) - mean(log(o$Qobs)))^2, na.rm=TRUE), 3)
 

Code in version 1.03 (in GoF-script):
	pars$NSlog  = if(min(c(o$Q,o$Qobs)) > 0) {pars$NSlog = round(1- sum((log(o$Qobs) - log(o$Q))^2, na.rm=TRUE) / 
                                            	sum((log(o$Qobs) - mean(log(o$Qobs)))^2, na.rm=TRUE), 3)}else{NA}



Problem 3: 
-------

No snowmelt routine


Solution 3: 
---------

Snowmelt routine added (extra script: WALRUS_snow)



Problem 4: 
-------

Header for figures missing


Solution 4: 
---------

Added header to plots in R.

Addded code in version 1.03 (in figures-script):
	if(nrFigs==2){legend(n, x="top",  bty="n")}




1.02: 
==============================================

Problem 1: 
-------

In the loop-function, if the initial groundwater level cannot be computed when cG is too high and/or cD too small, 
Gfrac (the fraction of discharge originating from groundwater) is decreased automatically until this is possible. 
In exceptional cases, it was possible that the fraction was decreased sufficiently, but initial groundwater level 
could still not be computed because the groundwater level was between 1 and 0 mm below surface. 


Solution 1: 
---------

The lower boundary for the solver-function is decreased from 1 to 0.

Code in version 1.01 (in loop-script):
      o$dG  [1]  = uniroot(f=function(x){return((pars$cD-x-o$hS[1])*(pars$cD-x)/pars$cG - o$Q[1]*pars$Gfrac)},
                         lower=1, upper=(pars$cD-o$hS[1]))$root

Code in version 1.02 (in loop-script):
      o$dG  [1]  = uniroot(f=function(x){return((pars$cD-x-o$hS[1])*(pars$cD-x)/pars$cG - o$Q[1]*pars$Gfrac)},
                         lower=0, upper=(pars$cD-o$hS[1]))$root


Problem 2: 
-------

In the default relation between dG and dVeq (called func_dVeq_dG) an error occurs when the groundwater table is 
shallower than the capillary fringe and ponding does not yet occur. What happens, is that when the soil 
becomes very wet, dG and dVeq decrease until dG drops below psi_ae. Then, dVeq increases instantly to dG.
This should only be the case when the groundwater level is above the surface and dVeq and dG rise together. 


Solution 2: 
---------

The default relation between dG and dVeq contains a separate section for when dG is between 0 (soil surface) 
and psi_ae (capillary fringe). In this situation, dVeq=0. 

Code in version 1.01 (in defaults-script):
      func_dVeq_dG_default  = function(x, pars){if(x>pars$psi_ae){
                         (x - pars$psi_ae/(1-pars$b) - x*(x/pars$psi_ae)^(-1/pars$b) + 
                         pars$psi_ae/(1-pars$b) *(x/pars$psi_ae)^(1-1/pars$b))*pars$theta_s}else{x}}

Code in version 1.02 (in defaults-script):
	func_dVeq_dG_default  = function(x, pars){if(x>pars$psi_ae){
                         (x - pars$psi_ae/(1-pars$b) - x*(x/pars$psi_ae)^(-1/pars$b) + 
                         pars$psi_ae/(1-pars$b) *(x/pars$psi_ae)^(1-1/pars$b))*pars$theta_s
                         }else if(x<0){x
                         }else{0}}


Problem 3: 
-------

If only the first discharge observation is given, because no data are available, the preprocessing function
returns an error because interpolation is not possible. 


Solution 3: 
---------

Add argument to interpolation function to use last known value to fill trailing NAs. 

Code in version 1.01 (in preprocessing-script - similar for ETpot, Q, fXG, fXS, hSmin, dG):
	f$Q = na.approx(f$Q)}

Code in version 1.02 (in preprocessing-script):
	f$Q = na.approx(f$Q, rule=2)}



1.01: fixed error in generation initial values
==============================================

Problem: 
-------

In the preprocessing-function, an extra line was created between the initial values 
and the first model output, causing the model to start with Q=0. I also moved the global 
variable definition of forcing_date upward (not necessary, but looks better).


Solution: 
---------

Code in version 1.0 (in preprocessing-script):

	  # add t=-1 (necessary as starting point for cumulative functions)
	  d_initial = date[1] - (date[2]-date[1]) *dt
	  d_end     = date[nrow(f)] + (date[nrow(f)]-date[nrow(f)-1]) *dt
	  date      = c(d_initial, date, d_end)
	  
	  # make functions from forcing time series
	  func_P      <<- cmpfun(approxfun(date, cumsum(c(0,0,f$P     )), rule=2))
	  func_ETpot  <<- cmpfun(approxfun(date, cumsum(c(0,0,f$ETpot )), rule=2))
	  func_Qobs   <<- cmpfun(approxfun(date, cumsum(c(0,0,f$Q     )), rule=2))
	  func_fXG    <<- cmpfun(approxfun(date, cumsum(c(0,0,f$fXG   )), rule=2))
	  func_fXS    <<- cmpfun(approxfun(date, cumsum(c(0,0,f$fXS   )), rule=2))
	  func_hSmin  <<- cmpfun(approxfun(date, c(f$hSmin[1],f$hSmin,f$hSmin[nrow(f)]), rule=2))
	  func_dGobs  <<- cmpfun(approxfun(date, c(f$dG   [1],f$dG   ,f$hSmin[nrow(f)]), rule=2))  
		
	  # write date as global varaible
	  forcing_date     <<- date

Code in version 1.01 (in preprocessing-script):

	  # add t=-1 (necessary as starting point for cumulative functions)
	  d_end     = date[nrow(f)] + (date[nrow(f)]-date[nrow(f)-1]) *dt
	  
	  # write date as global variable
	  forcing_date     <<- c(date, d_end)
	  
	  # make functions from forcing time series
	  func_P      <<- cmpfun(approxfun(forcing_date, cumsum(c(0,f$P     )), rule=2))
	  func_ETpot  <<- cmpfun(approxfun(forcing_date, cumsum(c(0,f$ETpot )), rule=2))
	  func_Qobs   <<- cmpfun(approxfun(forcing_date, cumsum(c(0,f$Q     )), rule=2))
	  func_fXG    <<- cmpfun(approxfun(forcing_date, cumsum(c(0,f$fXG   )), rule=2))
	  func_fXS    <<- cmpfun(approxfun(forcing_date, cumsum(c(0,f$fXS   )), rule=2))
	  func_hSmin  <<- cmpfun(approxfun(forcing_date, c(f$hSmin,f$hSmin[nrow(f)]), rule=2))
	  func_dGobs  <<- cmpfun(approxfun(forcing_date, c(f$dG   ,f$hSmin[nrow(f)]), rule=2))